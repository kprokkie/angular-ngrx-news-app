{"ast":null,"code":"import _classCallCheck from \"C:/Users/David/source/repos/angular-ngrx-news-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/David/source/repos/angular-ngrx-news-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var NewsService = /*#__PURE__*/(function () {\n  var NewsService = /*#__PURE__*/function () {\n    function NewsService(http) {\n      _classCallCheck(this, NewsService);\n\n      this.http = http;\n    }\n    /**\r\n     * Getting section news via http call\r\n     * @param section - section of news to be fetched\r\n     */\n\n\n    _createClass(NewsService, [{\n      key: \"getSectionNews\",\n      value: function getSectionNews(section) {\n        this.apiURL = \"https://api.nytimes.com/svc/topstories/v2/\".concat(section, \".json?api-key=315a5a51483b469a918246dc2753b339\");\n        return this.http.get(this.apiURL).pipe(tap(function (data) {\n          return console.log(data);\n        }), catchError(this.handleError));\n      }\n      /**\r\n       * Handle error\r\n       * @param err - error in response\r\n       */\n\n    }, {\n      key: \"handleError\",\n      value: function handleError(err) {\n        var errorMessage;\n\n        if (err.error instanceof ErrorEvent) {\n          // client-side or network error occurred. Handle it accordingly.\n          errorMessage = \"An error occurred: \".concat(err.error.message);\n        } else {\n          // back-end returned an unsuccessful response code & response body may contain what went wrong.\n          errorMessage = \"Backend returned code \".concat(err.status, \": \").concat(err.body.error);\n        }\n\n        console.error(err);\n        return throwError(errorMessage);\n      }\n    }]);\n\n    return NewsService;\n  }();\n\n  NewsService.ɵfac = function NewsService_Factory(t) {\n    return new (t || NewsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  NewsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NewsService,\n    factory: NewsService.ɵfac,\n    providedIn: 'root'\n  });\n  return NewsService;\n})();","map":null,"metadata":{},"sourceType":"module"}