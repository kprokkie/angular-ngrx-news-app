{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { mergeMap, map, catchError } from '../../../../node_modules/rxjs/operators';\nimport { NewsService } from '../../services/news.service';\nimport * as fromActions from '../actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../services/news.service\";\nexport let NewsEffects = /*#__PURE__*/(() => {\n  class NewsEffects {\n    constructor(actions$, newsService) {\n      this.actions$ = actions$;\n      this.newsService = newsService;\n      this.loadNews$ = createEffect(() => this.actions$.pipe(ofType(fromActions.NewsActionTypes.LOAD_SECTION_NEWS), // watch action\n      mergeMap(action => // service call to get the section news\n      this.newsService.getSectionNews(action.payload).pipe(map(news => new fromActions.LoadNewsSectionSuccess(news.results)), catchError(error => of(new fromActions.LoadNewsSectionFailure(error)))))));\n    }\n\n  }\n\n  NewsEffects.ɵfac = function NewsEffects_Factory(t) {\n    return new (t || NewsEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.NewsService));\n  };\n\n  NewsEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NewsEffects,\n    factory: NewsEffects.ɵfac\n  });\n  return NewsEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}